1) In your own words, explain what clean code is and why it is important.

Clean code is code properly written, so it reduces the risk of bugs, leverages modularity,
makes it easier for other to understand the logic behind and can be updated / modified easily,
without breaking.

2) Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

I think about a similar scandal, from another automotive company. They had properly injected
some bad code into their software, faking the reduction of emissions produced by adopting
a new engine released on the market.

3) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

It looks pretty clean even though I would probably:
- split it into 2 separate methods (extracting method)
- give a better name to the function.

  FUNCTION convertToCelsius(temp)
      SET convertedTemp to (temp-32) * (5/9)
      PRINT convertedTemp
  END FUNCTION

  FUNCTION convertToFahrenheit(temp)
      SET convertedTemp to (x * 1.8) + 32
      PRINT convertedTemp
  END FUNCTION

4) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

The only thing I would change is changing the word "sum" to "part".

5) Using pseudocode, refactor the code for the following examples using
the principles you have learned in this checkpoint.

** please find below the refactored versions**

5a. The following function prints the subtotal of a customer's transaction
and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   var totalDue = subTotal * discountRate + (subTotal * tax)
   IF isPaymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totalDue
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totalDue
   END IF
END FUNCTION

/////////////////////
5b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
IF guest.outstandingFees > 0 THEN
    PRINT guest + "has outstanding fees."
ELSE IF guest.hasOverdueBooks THEN
    PRINT guest + "has overdue books."
ELSE IF guest.accountActive THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
ELSE
    PRINT "Account is not active."
END IF
END FUNCTION

/////////////////////
5c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccountActions

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

CLASS Offers

 FUNCTION creditCardOffer
     IF (!customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF (!customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

** PROGRAMMING QUESTIONS **

6. Square Given an array of integers, find out whether
the sum of the integers is a perfect square. If it is
a perfect square, return the square root, otherwise
return the sum.

function checkPerfectSquare(arr){
  var sum = 0;
  for(var i in arr){
    sum += arr[i];
  }
  var squareRoot = Math.sqrt(sum);

  if(squareRoot % 1 === 0){
    return squareRoot;
  } else {
    return sum;
  }
}


7.Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function hasDuplicate(arr){
      arr = arr.sort();
      for(var i = 0; i < arr.length; i++){
          return arr[i+1] === arr[i];
      }
  }
